Compile.sh


if [ $# -ne 1  ]
then
	echo "Please provide one argument with valid file for compilation."
	exit 1
fi

if [ ! -f $1 ]
then
	echo "Invalid file name!!"
	exit 1
fi

filename=`echo "$1" | cut -f 1 -d '.'` # Get filename without extension
extension=`echo "$1" | cut -f 2 -d '.'`

if [ ! $extension == "c" ]
then
	echo "Not a C file!!"
	exit 1
fi

ext2="_Vars.txt"
ext3="_ICCode.txt"
ext4="_ASMCode.asm"
f2=${filename}${ext2}
f3=${filename}${ext3}
f4=${filename}${ext4}

bison -d --warning=none parse.y
flex lexical.l
gcc -c -w lex.yy.c
gcc -c -w parse.tab.c
gcc parse.tab.o lex.yy.o -o ex

rm lex.yy.c
rm lex.yy.o
rm parse.tab.c
rm parse.tab.h
rm parse.tab.o

./ex $1 $f3 $f2

if [ $? -eq 139 ]; then
    echo "Compiler gives segmentation fault!!"
    rm $f2
    rm "ex"
    exit 1
fi

if [ -f "Res.txt" ]
then

a=`cat "Res.txt"`
if [ $a -eq "1" ]
then
	python3 mapper.py $f2 $f3> $f4
	# spim -file $f4
	ans=`spim -file $f4`
	finalans=`echo "$ans" | tail -n+6`
	echo "Output :"
	echo "$finalans"
fi
rm "Res.txt"

else
	echo "No result file made!"
fi

rm $f2
rm "ex"

------------------------------------------------------------------------------------------------------------

lexical.l

%{ 
#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>
#include "parse.tab.h"
#include "line.h"
int lines;
void despace(char target[], char input[], int l);
void print_error();
int y=1;
%} 

sp [ \t]*
id [a-zA-Z][a-zA-Z0-9_]*
pnum ([0-9]+)|([0-9]+)"."([0-9]+)
nnum "-"{pnum}
num {nnum}|{pnum}

%% 
{sp}"int"{sp} {y=1;return INT;}
{sp}"float"{sp} {y=1;return FLT;}
{sp}"void"{sp} {y=1;return VOID;}
{sp}"printf"{sp} {y=1;return PRINT;}
{sp}"$$"{sp} {y=1;return DOL;}




{sp}"if"{sp} {y=1;return IF;}
{sp}"else"{sp} {y=1;return ELSE;}

{sp}"for"{sp} {y=1;return FORT;}
{sp}"while"{sp} {y=1;return WHILET;}
{sp}"return"{sp} {y=1;return RET;}
{sp}"switch"{sp} {y=1;return SWITCHT;}
{sp}"break"{sp} {y=1;return BREAK;}
{sp}"default"{sp} {y=1;return DEFAULT;}
{sp}"case"{sp} {y=1;return CASET;}




{sp}{id}{sp}   {y=0;char input[1000]; despace(input,yytext,strlen(yytext));strcpy(yylval.vp.vali,input);return ID;}
{sp}{num}{sp} { 
			   char input[1000]; 
				despace(input,yytext,strlen(yytext));
				if(y==0)
				{
					if(input[0]=='-')
					{
						for(int i=strlen(input)-1;i>=1;i--)
							unput(input[i]);
						y=1;
						return MINUS;

					}
				}
				y=0;
				strcpy(yylval.vp.vali,input);
				return NUM;
			}


{sp}";"{sp}		{y=1;return SC;}
{sp}":"{sp}		{y=1;return COLON;}
{sp}","{sp}		{y=1;return COMMA;}

{sp}"="{sp} {y=1;return EQ;}
{sp}"||"{sp} {y=1;return OR;}
{sp}"&&"{sp} {y=1;return AND;}
{sp}"!"{sp} {y=1;return NOT;}

{sp}"<"{sp} {y=1;return LT;}
{sp}"<="{sp} {y=1;return LTE;}
{sp}">"{sp} {y=1;return GT;}
{sp}">="{sp} {y=1;return GTE;}
{sp}"=="{sp} {y=1;return EQEQ;}
{sp}"!="{sp} {y=1;return NEQ;}

{sp}"+"{sp} {y=1;return PLUS;}
{sp}"-"{sp} {y=1;return MINUS;}
{sp}"*"{sp} {y=1;return MULT;}
{sp}"/"{sp} {y=1;return DIV;}
{sp}"%"{sp} {y=1;return MOD;}

{sp}"("{sp} {y=1;return OPT;}
{sp}")"{sp} {y=0;return CPT;}

{sp}"{"{sp} {y=1;return OCURLY;}
{sp}"}"{sp} {y=1;return CCURLY;}

{sp}"["{sp} {y=1;return OSQ;}
{sp}"]"{sp} {y=1;return CSQ;}


\n {lines++;}
. {}
%% 

int yywrap(void) {
    return 1;
}

void despace(char target[], char input[], int l){
	int start=0, end=l-1;
	while(input[start]==' ' || input[start]=='\t') start++;
	while(input[end]==' ' || input[end]=='\t') end--;
	int y=0;
	for (int i = start; i <= end; ++i)
	{
		target[y++]=input[i];
	}
	target[y]='\0';
}

void print_error()
{
	printf("Invalid Syntax while lexical analysis.\n");
}

-------------------------------------------------------------------------------------------------------------------

line.h

extern int lines;

-------------------------------------------------------------------------------------------------------------------

mapper.py

import sys

def checker(vars, a):
	if a in vars :
		return a
	elif len(a.split('_')) in [3,4]:
		if len(a.split('_')) == 4:
			return "$a" + a.split('_')[-1]
		return a;
	else :
		return "$"+a

def isfloatreg(a):
	if len(a) == 2 and a.startswith('f') and a[1].isdigit():
		return True
	elif len(a.split('_'))==4:
		return True
	else:
		return False

def iswordreg(a):
	if len(a) == 2 and a.startswith('t') and a[1].isdigit():
		return True
	elif len(a.split('_'))==4:
		return True
	else:
		return False

# --------- all the varialbe declaration here ----------

with open (sys.argv[1], "r") as myfile:
    data=myfile.readlines()

print(".data")

vars = []
types = {}
for i in data:
	x = i.split('\n')[0].split(',')
	print(x[0], end=":")
	vars.append(x[0])
	if x[2] != "0":
		print(" .space "+x[2])
	else:
		if(x[1] == "int"):
			print(" .word 0")
			types[x[0]] = "int"
		else :
			types[x[0]] = "float"
			print(" .float 0.0")

print("newline: .asciiz \"\\n\"")
print(".text")
print(".globl main")

# -------- making list of local variables used in each fn---------

with open (sys.argv[2], "r") as myfile:
    icode=myfile.readlines()

localvars = {}

for i in icode:
	y = i.split('\n')[0].split(' ')
	y = list(filter(('').__ne__, y))
	if y[1] == "func" and y[2] == "begin":
		currentFn = y[3]
		localvars[currentFn] = list()
	for j in y:
		if j.endswith("_" + currentFn) and j not in localvars[currentFn]:
			localvars[currentFn].append(j)

# print(localvars)
# ----------------------------------------------------------------

for i in icode:
	y = i.split('\n')[0].split(' ')
	y = list(filter(('').__ne__, y))
	y[0] = 'L'+y[0]
	# print(y)
	if(len(y) < 2):
		continue;
	if y[1] != "func":	
		print(y[0], end=" ")
	if(y[1] == "goto"):		
		y[2] = 'L'+ y[2]																					# goto statemements
		print("b " + y[2], end="")
	elif y[1] == "func":
		if y[2] == "begin":
			counter = 0											# i in $ai initialised to zero.
			currentFn = y[3]
			print(currentFn + ":", end="")
		else:
			print(y[0], end=" ")
			print("jr $ra")
	elif y[1] in ["return", "refparam", "param", "call"]:																# func statements
		if y[1] == "return":
			if len(y)==2:
				print("jr $ra", end="")
			elif iswordreg(y[2]):									# return t0
				print("move $v0, " + checker(vars, y[2]))
				print("jr $ra", end="")
			else:												# return f0
				print("mfc1 $v0, " + checker(vars, y[2]))
				print("jr $ra", end="")
		elif y[1] == "refparam":
			if iswordreg(y[2]):									# refparam t0
				print("move "+checker(vars, y[2])+", $v0", end="")
			else:												# refparam f0
				print("mtc1 $v0, "+checker(vars, y[2]), end="")
				
		elif y[1] == "param":
			if counter == 0:										    # if we're on the first param, move the stack
				z = ""
				size = 108 + len(localvars[currentFn])*4
				print("addi $sp, $sp, -" + str(size))
			else:	
				z = str(counter*4)

			print("sw $a" + str(counter) + ", " + z + "($sp)")			# push the $ai into the stack
			if iswordreg(y[2]):											# load new value in the $ai
				print("move $a" + str(counter) + ", " + checker(vars, y[2]), end="")			# param t0
			else:		
				print("mfc1 $a" + str(counter) + ", " + checker(vars, y[2]), end="")			# param f0
			counter = counter+1
		elif y[1] == "call":
			#push remaining ai
			if counter == 0:										    # if we're on the first param, move the stack
				z = ""
				size = 108 + len(localvars[currentFn])*4
				print("addi $sp,$sp,-" + str(size))
			else:	
				z = str(counter*4)

			for x in range(0, 4-counter):
				print("sw $a" + str(counter+x) + ", " + z + "($sp)")			# push the $ai into the stack
				z = str((counter+x+1)*4)
			#push t0-t9
			for x in range(10):
				print("sw $t" + str(x) + ", " + str(4*(4+x)) + "($sp)")				# push the $ti into the stack
			#push f0-f9 and f20
			for x in range(10):
				print("swc1 $f" + str(x) + ", " + str(4*(14+x)) + "($sp)")			# push the $ti into the stack
			print("swc1 $f20, 96($sp)")												# push the $ti into the stack
			#push s0
			print("sw $s0, 100($sp)")												# push the $ti into the stack
			#push ra
			print("sw $ra, 104($sp)")												# push the $ti into the stack
			#push all variables in this function to stack
			for i, local in enumerate(localvars[currentFn]):
				print("lw $t0, " + local)
				print("sw $t0, " + str(108 + i*4) + "($sp)")						# push the $ti into the stack

			print("jal " + y[2].split(',')[0])
			# restore all the registers
			print("lw $a0, ($sp)")
			print("lw $a1, 4($sp)")
			print("lw $a2, 8($sp)")
			print("lw $a3, 12($sp)")
			#load all variables in this function to stack
			for i, local in enumerate(localvars[currentFn]):
				print("lw $t0, " + str(108 + i*4) + "($sp)")						# load the $ti into the stack
				print("sw $t0, " + local)
			#load ti
			for x in range(0,10):
				print("lw $t" + str(x) + ", " + str(4*(4+x)) + "($sp)")				# restore the $ti from the stack
			#load f0-f9 and f20
			for x in range(10):
				print("lwc1 $f" + str(x) + ", " + str(4*(14+x)) + "($sp)")			# load the $fi into the stack
			print("lwc1 $f20, 96($sp)")												# load the $fi into the stack
			#load s0
			print("lw $s0, 100($sp)")												# load the $s0 into the stack
			#load ra
			print("lw $ra, 104($sp)")												# load the $ra into the stack
			# pop !!	
			size = 108 + len(localvars[currentFn])*4
			print("addi $sp, $sp, " + str(size), end="")
			counter = 0

	elif(y[1].startswith("if")):	
		# print(y)	
		a = y[1].split('(')[1]
		b = y[3].split(')')[0]
		if isfloatreg(a) and isfloatreg(b):													# (f0 < f1)
			operator = {
				"<" : "c.lt.s",
				"<=" : "c.le.s",
				"==" : "c.eq.s",
				">" : "c.lt.s",
				">=" : "c.le.s",
				"!=" : "c.eq.s",
			}
			if y[2] in [">", ">="]:
				a,b = b,a
			print(operator.get(y[2]) + " " + checker(vars, a) + ", " + checker(vars, b))		# if $f2 operator $f4 then code = 1 else code = 0
			if y[2]=="!=":
				print("bc1f L" + y[-1], end="")								# if code == 0 then jump to label
			else:
				print("bc1t L" + y[-1], end="")								# if code == 1 then jump to label
		else:																									# (t0 < t1)
			operator = {
				"<" : "bltz",
				">" : "bgtz",
				"<=" : "blez",
				">=" : "bgez",
				"==" : "beqz",
				"!=" : "bnez",
			}
			if(b[0].isdigit()):
				print("li $s0, " + b)
				print("sub $s0, " + checker(vars,a) + ", $s0")
			else:
				print("sub $s0, " + checker(vars,a) + ", " + checker(vars,b))
			print("     " + operator.get(y[2]) + " $s0, L" + y[-1], end="")  									# we're comparing two registers
	elif y[1].startswith("print"):
		reg = y[1].split(')')[0].split('(')[1]
		print("addi $sp, $sp, -8")
		print("sw $a0, ($sp)")
		print("sw $v0, 4($sp)")
		if(isfloatreg(reg)):
			print("li $v0, 2 \nmov.s $f12, "+checker(vars, reg)+" \nsyscall") # print float value in reg
		else:
			print("li $v0, 1 \nmove $a0, "+checker(vars, reg)+" \nsyscall")	# print int value in reg
		#printing newline
		print("li $v0, 4\nla $a0, newline\nsyscall")
		
		print("lw $a0, ($sp)")
		print("lw $v0, 4($sp)")
		print("addi $sp, $sp, 8", end="")
	elif y[1].startswith("Load"):
		print("la $"+y[2]+", "+y[3], end="")
	else:
		if any('[' in x for x in y):
			y[1]=y[1]+y[2]+y[3]
			a,b = y[1].split('=')
			if y[1][-1]==']':    
				# print("lol")
				t1,t2 = b.split('[')
				t2 = t2.split(']')[0]
				if iswordreg(a):		# t0 = t1[t2]
					print("add $"+ t1+", $"+t1+", $"+t2)
					print("lw $"+a+", ($"+t1+")", end="")
				else:					# f0 = t1[t2]
					print("add $"+ t1+", $"+t1+", $"+t2)
					print("l.s $"+a+", ($"+t1+")", end="")
			else:
				# print("hey")
				t1,t2 = a.split('[')
				t2 = t2.split(']')[0]
				if iswordreg(b):
					print("add $"+ t1+", $"+t1+", $"+t2)
					print("sw $"+b+", ($"+t1+")", end="")
				else:
					print("add $"+ t1+", $"+t1+", $"+t2)
					print("s.s $"+b+", ($"+t1+")", end="")
		elif(len(y) == 4):																			   # assignments
			a = y[-3]
			b = y[-1]
			if(b[0].isdigit() or b[0]=="-"):
				if isfloatreg(a) or isfloatreg(b):
					print("li.s " + checker(vars,a) + ", " + b, end="")
				else:
					print("li " + checker(vars,a) + ", " + b, end="")
			else:
				if b.startswith('ConvertToInt'):
					b = b.split('(')[1].split(')')[0]
					print("cvt.w.s " + checker(vars, b) + ", " + checker(vars, b))																			# "converting float to int"
					print("\tmfc1 " + checker(vars, a) + ", " + checker(vars, b), end="")
				elif b.startswith('ConvertToFloat'):
					b = b.split('(')[1].split(')')[0]
					print("mtc1 " + checker(vars, b) + ", " + checker(vars, a))
					print("\tcvt.s.w " + checker(vars, a) + ", " + checker(vars, a), end="")																# "converting int to float"
				elif a in vars:
					if isfloatreg(a) or isfloatreg(b):
						print("s.s " + checker(vars,b) + ", " + checker(vars,a), end="")				# var = f0
					else:
						print("sw " + checker(vars,b) + ", " + checker(vars,a), end="")					# var = t0
				else :
					if checker(vars,b).startswith("$a"):
						if isfloatreg(a):
							print("mtc1 " + checker(vars,b) + ", " + checker(vars,a), end="")
						else:
							print("move " + checker(vars,a) + ", " + checker(vars,b), end="")
					elif checker(vars,a).startswith("$a"):
						if isfloatreg(b):
							print("mfc1 " + checker(vars,a) + ", " + checker(vars,b), end="")
						else:
							print("move " + checker(vars,a) + ", " + checker(vars,b), end="")
					elif isfloatreg(a) and isfloatreg(b):
						print("mov.s " + checker(vars,a) + ", " + checker(vars,b), end="")				# f0 = f1
					elif isfloatreg(a) or isfloatreg(b):
						print("l.s " + checker(vars,a) + ", " + checker(vars,b), end="")    			# f0 = var
					else:
						if iswordreg(a) and iswordreg(b):
							print("move " + checker(vars,a) + ", " + checker(vars,b), end="")			# t0 = t1 
						else:
							print("lw " + checker(vars,a) + ", " + checker(vars,b), end="")				# t0 = var

		else:
			# print(y)
			a = y[-5]
			b = y[-3]
			opt = y[-2]
			c = y[-1]
			# print(y)
			operator = {
				"+" : "add",
				"-" : "sub",
				"*" : "mul",
			}
			x = " "
			if isfloatreg(a) or isfloatreg(b):
				x = ".s "
			if opt in ["+","-","*"]:
				print(operator.get(opt) + x + checker(vars,a) + ", " + checker(vars,b) + ", " + checker(vars,c), end="")
			else:
				if isfloatreg(a) or isfloatreg(b):
					print("div.s " + checker(vars, a) + ", " + checker(vars, b) + ", " + checker(vars, c))										# f0 = f1 / f2
				else:
					print("div " + checker(vars,b) + ", " + checker(vars,c))							# t0 = t1 / t2
					if(opt == "%"):
						print("mfhi " + checker(vars,a), end="")										# quotient
					else:
						print("mflo " + checker(vars,a), end="")										# remainder
	print()

-------------------------------------------------------------------------------------------------------------------------

parse.y

%{
#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "line.h"

extern FILE * yyin;
void yyerror(char *s);

bool intreg[10];
bool floatreg[10];
int switchglobal;
FILE*fp;
FILE*fil;
int canbreakarr[10][20];
int canbreakcount[10];
struct varrecord
{
	char varname[100];
	char vartype[100];
	char finalname[100];
	bool tag;
	int level;

	bool IsArr;
	int dimcount;
	int dim[100];
	int moddim[100];
};
struct funcrecord
{
	char name[100];
	char type[100];
	struct varrecord paramtable[100];
	struct varrecord vartable[100];
	int paramcount;
	int varcount;  
};


struct funcrecord functable[1000];
bool success=true;
int actfuncindex=0;
int canbreak=0;
int callfuncindex;
int globallevel=0;
void releasetemp(int i);
int newtemp();
int InArr(struct varrecord arr[],int size,char finder[]);
bool CheckVar (struct varrecord arr[],int size,char finder[],int level);
void PrintVars(struct varrecord a);
void PrintFuncs(struct funcrecord a);
void despace(char target[], char input[], int l);
void PrintFuncTable();
int stoi(char*s);
int nextquad=1;

char vars[100][100];
char types[100][100];
int sizes[100];
int totvars=0;

%}

%start	START


%token	SELECT
%token	PRINT
%token	INT
%token	FLT
%token	ID

%token 	SC
%token 	SP
%token COMMA
%token COLON

%token EQ
%token OR
%token AND
%token NOT

%token LT
%token LTE
%token GT
%token GTE
%token EQEQ
%token NEQ

%token PLUS
%token MINUS
%token MULT
%token DIV
%token MOD

%token OPT
%token CPT
%token OCURLY
%token CCURLY
%token IF
%token ELSE
%token FORT
%token WHILET
%token VOID
%token RET
%token SWITCHT
%token CASET
%token BREAK
%token DEFAULT

%token CSQ
%token OSQ
%token NUM
%token DOL


%union
{
  struct attributes{
  	char vali[1000];
	char type[1000];
	
	int arr;
	int ind;

	int counter;
	int countor;
	int countand;
	bool caseallow;
	bool isarray;

	int bplist[1000];
	int bpcount;
	int tempreg;
	int quad;
	int begin;
	int bplist2[1000];
	int bpcount2;
	} vp;
};

%type<vp> F START INPUT FUNC_DECL FUNC_HEAD BODY RESULT_ID OPT DECLISTE CPT RESULT  INT FLT VOID DECLIST COMMA DEC TYPE OCURLY SLIST CCURLY MSLIST S VAR_DECL ASSIGN IFELSE FOR WHILE INCRLEVEL FUNC_CALL SC RETURN SWITCH RET COR PARAMLIST PLIST WHILEXP WHILET MWHILE FOREXP FORT MFOR NFOR FORASSIGN IFEXP NIF MIF ELSE L IDS ARRS ARR ID BRLIST OSQ CSQ NUM EQ CAND OR AND CNOT NOT ECOMP LT LTE GT GTE NEQ EQEQ E PLUS MINUS T MULT DIV MOD SWITCHT CASES CASELIST MCASE DEFAULTE DEFAULT COLON CASE CASET NCASE IDTEMP SWITCHET CASETEMP FORBACK1 FORBACK2 CBODY ARRFUNC LISTFUNC CMARK ARRF ARRFLIST INPUTGLOBAL GLIST MGL NGL DOL
%%

START : INPUTGLOBAL
		;

INPUTGLOBAL : MGL GLIST NGL INPUT
				| NGL INPUT
				;

NGL    : {
			actfuncindex=1;
		 }
		;
 MGL  : {
			strcpy(functable[0].name,"global");
			strcpy(functable[0].type,"int");
		}
		 ;

GLIST : GLIST DOL VAR_DECL
		| DOL VAR_DECL
		;

INPUT : FUNC_DECL INPUT
		| FUNC_DECL
		;

FUNC_DECL : FUNC_HEAD BODY {
							actfuncindex++;  
							globallevel=0;
							 char printer[1000];
							 backpatch($2.bplist,$2.bpcount,nextquad);
							 
							 

							snprintf(printer,999,"func end");
							GenQuad(printer);
							
						}
				| error SC  { yyerrok;}

		    ;
FUNC_HEAD : RESULT_ID OPT DECLISTE CPT  {
										
										globallevel++;	

										}
			;
RESULT_ID : RESULT ID { functable[actfuncindex].paramcount=0;
						functable[actfuncindex].varcount=0;
						globallevel++;
						strcpy(functable[actfuncindex].name,$2.vali);

						char printer[1000];
						snprintf(printer,999,"func begin %s",$2.vali);
						GenQuad(printer);

					  }
			;
RESULT : INT       {strcpy(functable[actfuncindex].type,"int");}
		| FLT	   {strcpy(functable[actfuncindex].type,"float");}
		| VOID     {strcpy(functable[actfuncindex].type,"void");}
		;
DECLISTE : DECLIST
		| ;
DECLIST : DECLIST COMMA DEC
			| DEC
			;
DEC : TYPE ID 				{
								int finder;
								finder = InArr(functable[actfuncindex].paramtable,functable[actfuncindex].paramcount,$2.vali); 
								if(finder!=-1)
								{
									char printer[1000];
									snprintf(printer,999,"Parameter with name %s already declared.",$2.vali);
									CallError(printer);
								}
								else
								{
									struct varrecord new_record;
									strcpy(new_record.varname,$2.vali);
									strcpy(new_record.vartype,$1.type);
									new_record.tag=false;
									new_record.level = globallevel;
									new_record.IsArr = false;
									new_record.dimcount = 0;

									char finalname[1000];
									snprintf(finalname,999,"%s_%d_%s_%d",new_record.varname,globallevel,functable[actfuncindex].name,functable[actfuncindex].paramcount);

									strcpy(new_record.finalname,finalname);

									functable[actfuncindex].paramtable[functable[actfuncindex].paramcount++]=new_record;
								}
								
							}
		;
DEC : TYPE ARRFUNC 					{
								int finder;
								finder = InArr(functable[actfuncindex].paramtable,functable[actfuncindex].paramcount,$2.vali); 
								if(finder!=-1)
								{
									char printer[1000];
									snprintf(printer,999,"Parameter with name %s already declared.",$2.vali);
									CallError(printer);
								}
								else
								{
									struct varrecord new_record;
									strcpy(new_record.varname,$2.vali);
									strcpy(new_record.vartype,$1.type);
									new_record.tag=false;
									new_record.level = globallevel;
									new_record.IsArr = true;
									new_record.dimcount = $2.counter;

									char finalname[1000];
									snprintf(finalname,999,"%s_%d_%s_%d",new_record.varname,globallevel,functable[actfuncindex].name,functable[actfuncindex].paramcount);

									strcpy(new_record.finalname,finalname);

									functable[actfuncindex].paramtable[functable[actfuncindex].paramcount++]=new_record;
								}	
								}
		;
ARRFUNC : ID LISTFUNC     {strcpy($$.vali,$1.vali);
							$$.counter=$2.counter;}
		;

LISTFUNC : LISTFUNC OSQ CSQ  {$$.counter=$1.counter+1;}
			| OSQ CSQ     {$$.counter=1;}
			;

BODY : OCURLY SLIST CCURLY  {
								int counter=0;
								int i;
								for(i=functable[actfuncindex].varcount-1;i>=0;i--)
								{
									if(functable[actfuncindex].vartable[i].level==globallevel)
									counter++;
								}
								functable[actfuncindex].varcount -= counter;
								globallevel--;

								$$.bpcount=0;
								for(int i=0;i<$2.bpcount;i++)
								{
									$$.bplist[$$.bpcount++]=$2.bplist[i];
								}

							}
		;
SLIST : SLIST MSLIST S      {
								backpatch($1.bplist,$1.bpcount,$2.quad);

								$$.bpcount=0;
								for(int i=0;i<$3.bpcount;i++)
								{
									$$.bplist[$$.bpcount++]=$3.bplist[i];
								}
							}
		| S                 {
								$$.bpcount=0;
								for(int i=0;i<$1.bpcount;i++)
								{
									$$.bplist[$$.bpcount++]=$1.bplist[i];
								}
							}
		;
MSLIST : { $$.quad=nextquad;};

S:      error SC  { yyerrok;}
		| VAR_DECL {}
		| ASSIGN {}
		| IFELSE {
						$$.bpcount=0;
						int i;
						for( i=0;i<$1.bpcount;i++)
						{
							$$.bplist[$$.bpcount++]=$1.bplist[i];
						}
				 }
		| FOR    {

						$$.bpcount=0;
						int i;
						for(i=0;i<canbreakcount[canbreak];i++)
						{
							$$.bplist[$$.bpcount++]=canbreakarr[canbreak][i];
						}
						canbreakcount[canbreak]=0;
						canbreak--;
						for( i=0;i<$1.bpcount;i++)
						{
							$$.bplist[$$.bpcount++]=$1.bplist[i];
						}
				 }
		| WHILE  {
						$$.bpcount=0;
						int i;
						for(i=0;i<canbreakcount[canbreak];i++)
						{
							$$.bplist[$$.bpcount++]=canbreakarr[canbreak][i];
						}
						canbreakcount[canbreak]=0;
						canbreak--;
						for( i=0;i<$1.bpcount;i++)
						{
							$$.bplist[$$.bpcount++]=$1.bplist[i];
						}
				 }
		| INCRLEVEL BODY	{
								$$.bpcount=0;
								int i;
								for( i=0;i<$2.bpcount;i++)
								{
									$$.bplist[$$.bpcount++]=$2.bplist[i];
								}
							}
		| FUNC_CALL SC {}
		| RETURN SC {


					}
		| SWITCH {
						$$.bpcount=0;

						int i;
						for(i=0;i<canbreakcount[canbreak];i++)
						{
							$$.bplist[$$.bpcount++]=canbreakarr[canbreak][i];
						}
						canbreakcount[canbreak]=0;
						canbreak--;
						for(i=0;i<$1.bpcount;i++){
							$$.bplist[$$.bpcount++]=$1.bplist[i];
						}
						releaseint(switchglobal);

				 }
		| BREAK SC 			{
								if(canbreak==0)
								{
									CallError("Break can only occur within switch or loops.");
								}
								char printer[1000];
								snprintf(printer,999,"goto _____");
								canbreakarr[canbreak][canbreakcount[canbreak]++]=nextquad;
								GenQuad(printer);
							}
		| PRINT OPT COR CPT  SC      {
								char printer[1000];
								backpatch($3.bplist,$3.bpcount,nextquad);
								if(!strcmp($3.type,"errortype"))
								{
									CallError("Some error while calling print.");
								}
								else if(!strcmp($3.type,"int"))
								{
									snprintf(printer,999,"print(t%d)",$3.tempreg); 
									GenQuad(printer);
									releaseint($3.tempreg);
								}
								else if(!strcmp($3.type,"float"))
								{
									snprintf(printer,999,"print(f%d)",$3.tempreg); 
									GenQuad(printer);
									releasefloat($3.tempreg);
								}
							}
		; 

INCRLEVEL :  {globallevel++;}
			;
RETURN : RET           	{
							if(strcmp(functable[actfuncindex].type,"void"))
							{
								CallWarning("No return value in non-void function.");
							}
							char printer[1000];
							snprintf(printer,999,"return");
							GenQuad(printer);
						}
		| RET COR       {
							if(!strcmp(functable[actfuncindex].type,"void"))
							{
								CallWarning("Return value in a void function.");
							}
							backpatch($2.bplist,$2.bpcount,nextquad);
							char printer[1000];
							if(!strcmp(functable[actfuncindex].type,"float"))
							{
								int temp2=$2.tempreg;
								if(!strcmp($2.type,"int"))
								{
									temp2=newfloat();
									snprintf(printer,999,"f%d = ConvertToFloat(t%d)",temp2,$2.tempreg);
									releaseint($2.tempreg);
									GenQuad(printer);
								}
								snprintf(printer,999,"return f%d",temp2);
								GenQuad(printer);
								releasefloat(temp2);
								
							}
							else
							{
								int temp2=$2.tempreg;
								if(!strcmp($2.type,"float"))
								{
									temp2=newint();
									snprintf(printer,999,"t%d = ConvertToInt(f%d)",temp2,$2.tempreg);
									releasefloat($2.tempreg);
									GenQuad(printer);
								}
								snprintf(printer,999,"return t%d",temp2);
								GenQuad(printer);
								releaseint(temp2);

							}

						}
		;

FUNC_CALL : IDTEMP OPT PARAMLIST CPT {
										if(callfuncindex!=-1 && functable[callfuncindex].paramcount!=$3.counter)
										{
											CallError("Number of parameters not matching.");
											strcpy($$.type,"errortype");
										}
										else if(callfuncindex==-1)
										{
											strcpy($$.type,"errortype");
										}
										else
										{
											strcpy($$.type,functable[callfuncindex].type);
										}


										char printer[1000];
										snprintf(printer,999,"call %s,%d",$1.vali,$3.counter+1);
										GenQuad(printer);
										int gettemp;
										if(callfuncindex!=-1)
										{
										if(!strcmp(functable[callfuncindex].type,"int"))
										{	
											gettemp=newint();
											snprintf(printer,999,"refparam t%d",gettemp);
											GenQuad(printer);
										}
										else if(!strcmp(functable[callfuncindex].type,"float"))
										{
											gettemp=newfloat();
											snprintf(printer,999,"refparam f%d",gettemp);
											GenQuad(printer);
										}
										else
											gettemp=-1;

										$$.tempreg=gettemp;
										}

									 }
			;
IDTEMP : ID 				{
								int get=-1;
								int i=0;
								for(i=0;i<actfuncindex+1;i++)
								{
									if(!strcmp(functable[i].name,$1.vali))
									{
											get=i;
											break;
									}
								}

								if(get==-1)
								{
									CallError("No such function exists.");
									callfuncindex=-1;
								}
								else
								{
									callfuncindex = get;
								}
								strcpy($$.vali,$1.vali);
	
							}
		;
PARAMLIST : PLIST 		{
							$$.counter = $1.counter;
						}
			|			{
							$$.counter = 0;
						} 
			;
PLIST : PLIST COMMA COR {
							$$.counter++;
							backpatch($3.bplist,$3.bpcount,nextquad);
							char checktype[100];
							if(callfuncindex!=-1)
							strcpy(checktype,functable[callfuncindex].paramtable[$$.counter-1].vartype);
							else{
							strcpy(checktype,"errortype");
							}

							char printer[1000];
							if(!strcmp($3.type,"int"))
							{
								if(!strcmp(checktype,"float"))
								{
									int gettemp = newfloat();
									
									snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp,$3.tempreg);
									GenQuad(printer);
									releaseint($3.tempreg);
									snprintf(printer,999,"param f%d",gettemp);
									releasefloat(gettemp);

								}
								else
								{
								snprintf(printer,999,"param t%d",$3.tempreg);
								releaseint($3.tempreg);
								}
							}
							if(!strcmp($3.type,"float"))
							{
								if(!strcmp(checktype,"int"))
								{
									int gettemp = newint();
									snprintf(printer,999,"t%d = ConvertToInt(f%d)",gettemp,$3.tempreg);
									GenQuad(printer);
									releasefloat($3.tempreg);
									snprintf(printer,999,"param t%d",gettemp);
									releaseint(gettemp);
								}
								else
								{
								snprintf(printer,999,"param f%d",$3.tempreg);
								releasefloat($3.tempreg);
								}	
							}

							GenQuad(printer);

						}
		| COR 			{
							$$.counter=1;
							backpatch($1.bplist,$1.bpcount,nextquad);

							char checktype[100];
							if(callfuncindex!=-1)
							strcpy(checktype,functable[callfuncindex].paramtable[$$.counter-1].vartype);
							else
							strcpy(checktype,"errortype");
							char printer[1000];
							if(!strcmp($1.type,"int"))
							{
								if(!strcmp(checktype,"float"))
								{
									int gettemp = newfloat();
									
									snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp,$1.tempreg);
									GenQuad(printer);
									releaseint($1.tempreg);
									snprintf(printer,999,"param f%d",gettemp);
									releasefloat(gettemp);

								}
								else
								{
								snprintf(printer,999,"param t%d",$1.tempreg);
								releaseint($1.tempreg);
								}
							}
							if(!strcmp($1.type,"float"))
							{
								if(!strcmp(checktype,"int"))
								{
									int gettemp = newint();
									snprintf(printer,999,"t%d = ConvertToInt(f%d)",gettemp,$1.tempreg);
									GenQuad(printer);
									releasefloat($1.tempreg);
									snprintf(printer,999,"param t%d",gettemp);
									releaseint(gettemp);
								}
								else
								{
								snprintf(printer,999,"param f%d",$1.tempreg);
								releasefloat($1.tempreg);
								}	
							}
							GenQuad(printer);

						}			
		;



WHILE : WHILEXP BODY				{
										
										char printer[1000];
										snprintf(printer,999,"goto %d",$1.begin);
										GenQuad(printer);
										backpatch($2.bplist,$2.bpcount,$1.begin);
										$$.bpcount=0;
										int i;
										for(i=0;i<$1.bpcount;i++)
											$$.bplist[$$.bpcount++]=$1.bplist[i];
									}
		;
WHILEXP : WHILET MWHILE OPT COR CPT { 
									backpatch($4.bplist,$4.bpcount,nextquad);
									
									int temp2=$4.tempreg;
									char printer[1000];
									if(!strcmp($4.type,"float"))
									{
										temp2=newint();
										snprintf(printer,999,"t%d = ConvertToInt(f%d)",temp2,$4.tempreg);
										releasefloat($4.tempreg);
										GenQuad(printer);
									}

									snprintf(printer,999,"if(t%d == 0) goto _____",temp2);
									$$.bpcount=0;
									$$.bplist[$$.bpcount++]=nextquad;
									GenQuad(printer);
									releaseint(temp2);
									$$.begin=$2.quad;

									globallevel++; canbreak++;
									
									}
		;
MWHILE :           { $$.quad=nextquad;} 
		;



FOR : FOREXP BODY {		
						char printer[1000];
						snprintf(printer,999,"goto _____");
						$2.bplist[$2.bpcount++]=nextquad;
						GenQuad(printer);
						backpatch($2.bplist,$2.bpcount,$1.quad);
						$$.bpcount=0;
						int i;
						for(i=0;i<$1.bpcount;i++)
						{
							$$.bplist[$$.bpcount++]=$1.bplist[i];
						}	
					}
		;

FOREXP : FORBACK1 FORBACK2 {globallevel++;canbreak++;
								$$.quad=$2.quad;
								char printer[1000];
								snprintf(printer,999,"goto %d",$1.quad);
								GenQuad(printer);

								backpatch($1.bplist2,$1.bpcount2,nextquad);
								$$.bpcount=0;
								int i;
								for(i=0;i<$1.bpcount;i++)
								{
									$$.bplist[$$.bpcount++]=$1.bplist[i];
								}	
							}
		;
FORBACK1 : FORT OPT ASSIGN MFOR COR SC {
									backpatch($5.bplist,$5.bpcount,nextquad);
									int temp2=$5.tempreg;
									char printer[1000];
									if(!strcmp($5.type,"float"))
									{
										temp2=newint();
										snprintf(printer,999,"t%d = ConvertToInt(f%d)",temp2,$5.tempreg);
										releasefloat($5.tempreg);
										GenQuad(printer);
									}

									snprintf(printer,999,"if(t%d == 0) goto _____",temp2);
									$$.bpcount=0;
									$$.bplist[$$.bpcount++]=nextquad;
									GenQuad(printer);
									releaseint(temp2);
									$$.bpcount2=0;
									$$.bplist2[$$.bpcount2++]=nextquad;
									snprintf(printer,999,"goto _____");
									GenQuad(printer);
									$$.quad=$4.quad;

 									}
 		;

FORBACK2: NFOR FORASSIGN CPT { $$.quad=$1.quad;}
		;
MFOR : { $$.quad=nextquad;}
	   ;
NFOR : {$$.quad=nextquad;}
		;




IFELSE : IFEXP BODY                    {
											int i;
											$$.bpcount=0;
											for(i=0;i<$1.bpcount;i++)
											{
												$$.bplist[$$.bpcount++]=$1.bplist[i];
											}
											for(i=0;i<$2.bpcount;i++)
											{
												$$.bplist[$$.bpcount++]=$2.bplist[i];
											}


										}
		| IFEXP BODY NIF ELSE MIF BODY { 
											backpatch($1.bplist,$1.bpcount,$5.quad);
											$$.bpcount=0;
											int i;
											for(i=0;i<$2.bpcount;i++)
											{
												$$.bplist[$$.bpcount++]=$2.bplist[i];
											}
											for(i=0;i<$3.bpcount;i++)
											{
												$$.bplist[$$.bpcount++]=$3.bplist[i];
											}
											for(i=0;i<$6.bpcount;i++)
											{
												$$.bplist[$$.bpcount++]=$6.bplist[i];
											}



										}
		;
NIF : 								{
											char printer[1000];
											snprintf(printer,999,"goto _____");
											$$.bpcount=0;
											$$.bplist[$$.bpcount++]=nextquad;
											GenQuad(printer);
										}
										;
MIF :  											{$$.quad=nextquad;globallevel++;}
		;
IFEXP : IF OPT COR CPT  						{ 
									backpatch($3.bplist,$3.bpcount,nextquad);
									char printer[1000];
									globallevel ++;
									int temp2=$3.tempreg;
									if(!strcmp($3.type,"float"))
									{
										temp2=newint();
										snprintf(printer,999,"t%d = ConvertToInt(f%d)",temp2,$3.tempreg);
										releasefloat($3.tempreg);
										GenQuad(printer);
									}

									snprintf(printer,999,"if(t%d == 0) goto _____",temp2);
									$$.bpcount=0;
									$$.bplist[$$.bpcount++]=nextquad;
									GenQuad(printer);
									releaseint(temp2);
								}
		;




VAR_DECL : TYPE L SC 				{
										int i;
										int ct = 1;
										for(i=0;i<functable[actfuncindex].varcount;i++)
										{
											if(!strcmp(functable[actfuncindex].vartable[i].vartype,"-1"))
											{
												strcpy(functable[actfuncindex].vartable[i].vartype,$1.type);
												strcpy(types[totvars-ct],$1.type);
												ct--;

											}
										}
									}
		;
TYPE : INT  {strcpy($$.type,"int");}
	| FLT  	{strcpy($$.type,"float");}
	;
L : L COMMA IDS
	| IDS   
	| L COMMA ARRS
	| ARRS            
	;

ARRS : ARR
		;

ARR : ID BRLIST                 {
				int finder;
				int checker;
				finder = InArr(functable[actfuncindex].paramtable,functable[actfuncindex].paramcount,$1.vali); 
				checker = InArr(functable[actfuncindex].vartable,functable[actfuncindex].varcount,$1.vali);
				if(finder!=-1 && globallevel==2)
				{
					char printer[1000];
					snprintf(printer,999,"Parameter with name %s already exists",$1.vali);
					CallError(printer);
				}
				else if(checker!=-1 && functable[actfuncindex].vartable[checker].level==globallevel)
				{
					char printer[1000];
					snprintf(printer,999,"Variable with name %s already exists in the current scope.",$1.vali);
					CallError(printer);
				}
				else
				{
					strcpy(functable[actfuncindex].vartable[functable[actfuncindex].varcount].varname,$1.vali);
					strcpy(functable[actfuncindex].vartable[functable[actfuncindex].varcount].vartype,"-1");	
					functable[actfuncindex].vartable[functable[actfuncindex].varcount].tag=true;
					functable[actfuncindex].vartable[functable[actfuncindex].varcount].level=globallevel;
					functable[actfuncindex].vartable[functable[actfuncindex].varcount].IsArr=true;

					char finalname[1000];
					snprintf(finalname,999,"%s_%d_%s",$1.vali,globallevel,functable[actfuncindex].name);
					strcpy(vars[totvars],finalname);
					strcpy(types[totvars],functable[actfuncindex].vartable[functable[actfuncindex].varcount].vartype);

					int store = functable[actfuncindex].vartable[functable[actfuncindex].varcount].dimcount;

					functable[actfuncindex].vartable[functable[actfuncindex].varcount].moddim[store-1]=1;
					for(int j=store-2;j>=0;j--)
					{
						functable[actfuncindex].vartable[functable[actfuncindex].varcount].moddim[j] = functable[actfuncindex].vartable[functable[actfuncindex].varcount].moddim[j+1] * functable[actfuncindex].vartable[functable[actfuncindex].varcount].dim[j+1];
					}

					int prod=1;
					int i=0;
					for(i=0;i<functable[actfuncindex].vartable[functable[actfuncindex].varcount].dimcount;i++)
					{
						prod *= functable[actfuncindex].vartable[functable[actfuncindex].varcount].dim[i];
					}
					sizes[totvars]=prod;
					totvars++;



					strcpy(functable[actfuncindex].vartable[functable[actfuncindex].varcount].finalname,finalname);
					functable[actfuncindex].varcount++;
				}	
								}
		;
BRLIST : BRLIST OSQ NUM CSQ     {
									int t = strlen($3.vali);
									int i=0;
									bool isf=false;
									for(i=0;i<t;i++)
									{
										if($3.vali[i]=='.')
										{
										isf=true;
										break;
										}
									}
									bool isn = ($3.vali[0]=='-');
									if(isf)
									{
									CallError("Array dimensions should be an integer");
									}
									if(isn)
									{
									CallError("Array dimensions should be an positive integer");
									}

							functable[actfuncindex].vartable[functable[actfuncindex].varcount].dim[functable[actfuncindex].vartable[functable[actfuncindex].varcount].dimcount++]=stoi($3.vali);
	
								}
		| OSQ NUM CSQ {
									int t = strlen($2.vali);
									int i=0;
									bool isf=false;
									for(i=0;i<t;i++)
									{
										if($2.vali[i]=='.')
										{
										isf=true;
										break;
										}
									}
									bool isn = ($2.vali[0]=='-');
									if(isf)
									{
									CallError("Array dimensions should be an integer");
									}
									if(isn)
									{
									CallError("Array dimensions should be an positive integer");
									}

							functable[actfuncindex].vartable[functable[actfuncindex].varcount].dimcount=1;
							functable[actfuncindex].vartable[functable[actfuncindex].varcount].dim[0]=stoi($2.vali);

					  }
		;

IDS : ID 	{
				int finder;
				int checker;
				finder = InArr(functable[actfuncindex].paramtable,functable[actfuncindex].paramcount,$1.vali); 
				checker = InArr(functable[actfuncindex].vartable,functable[actfuncindex].varcount,$1.vali);
				if(finder!=-1 && globallevel==2)
				{
					char printer[1000];
					snprintf(printer,999,"Parameter with name %s already exists",$1.vali);
					CallError(printer);
				}
				else if(checker!=-1 && functable[actfuncindex].vartable[checker].level==globallevel)
				{
					char printer[1000];
					snprintf(printer,999,"Variable with name %s already exists in the current scope.",$1.vali);
					CallError(printer);
				}
				else
				{
					struct varrecord new_record;
					strcpy(new_record.varname,$1.vali);
					strcpy(new_record.vartype,"-1");
					new_record.tag=true;
					new_record.level = globallevel;
					new_record.IsArr = false;
					new_record.dimcount = 0;



					char finalname[1000];
					snprintf(finalname,999,"%s_%d_%s",new_record.varname,globallevel,functable[actfuncindex].name);
					strcpy(vars[totvars],finalname);
					strcpy(types[totvars],new_record.vartype);
					sizes[totvars]=0;
					totvars++;

					strcpy(new_record.finalname,finalname);
					functable[actfuncindex].vartable[functable[actfuncindex].varcount++]=new_record;

				}
			}
		;



FORASSIGN : ID EQ COR       {
																backpatch($3.bplist,$3.bpcount,nextquad);
								int finder;
								int checker,gchecker;
								finder = InArr(functable[actfuncindex].paramtable,functable[actfuncindex].paramcount,$1.vali); 
								checker = InArr(functable[actfuncindex].vartable,functable[actfuncindex].varcount,$1.vali);
								gchecker = InArr(functable[0].vartable,functable[0].varcount,$1.vali);

								if(checker==-1 && finder==-1 && gchecker==-1)
								{
									char printer[1000];
									snprintf(printer,999,"No such variable called %s exists",$1.vali);
									CallError(printer);
								}
								if(checker!=-1)
									strcpy($1.type,functable[actfuncindex].vartable[checker].vartype);
								else if (finder!=-1)
									strcpy($1.type,functable[actfuncindex].paramtable[finder].vartype);
								else if(gchecker!=-1)
									strcpy($1.type,functable[0].vartable[gchecker].vartype);


								if($3.tempreg==-1)
								{
									CallError("Void function does not return anything.");
								}
								else if($3.tempreg==-2)
								{
									CallError("Some error in assignment.");
								}
								else
								{
									char printer[1000];
									if(!strcmp($3.type,"int"))
									{
										if(!strcmp($1.type,"int"))
										{
											if(checker!=-1)
												snprintf(printer,999,"%s = t%d",functable[actfuncindex].vartable[checker].finalname,$3.tempreg);
											else if(finder!=-1)
												snprintf(printer,999,"%s = t%d",functable[actfuncindex].paramtable[finder].finalname,$3.tempreg);
											else
												snprintf(printer,999,"%s = t%d",functable[0].vartable[gchecker].finalname,$3.tempreg);

											releaseint($3.tempreg);

										}
										else
										{
											int gettemp=newfloat();
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp,$3.tempreg);
											GenQuad(printer);
											releaseint($3.tempreg);
											if(checker!=-1)
												snprintf(printer,999,"%s = f%d",functable[actfuncindex].vartable[checker].finalname,gettemp);
											else if(finder!=-1)
												snprintf(printer,999,"%s = f%d",functable[actfuncindex].paramtable[finder].finalname,gettemp);
											else
												snprintf(printer,999,"%s = f%d",functable[0].vartable[gchecker].finalname,gettemp);

											releasefloat(gettemp);
										}
									}
									if(!strcmp($3.type,"float"))
									{
										if(!strcmp($1.type,"float"))
										{
											if(checker!=-1)
												snprintf(printer,999,"%s = f%d",functable[actfuncindex].vartable[checker].finalname,$3.tempreg);
											else if(finder!=-1)
												snprintf(printer,999,"%s = f%d",functable[actfuncindex].paramtable[finder].finalname,$3.tempreg);
											else
												snprintf(printer,999,"%s = f%d",functable[0].vartable[gchecker].finalname,$3.tempreg);

											releasefloat($3.tempreg);

										}
										else
										{
											int gettemp=newint();
											snprintf(printer,999,"t%d = ConvertToInt(f%d)",gettemp,$3.tempreg);
											GenQuad(printer);
											releasefloat($3.tempreg);
											if(checker!=-1)
												snprintf(printer,999,"%s = t%d",functable[actfuncindex].vartable[checker].finalname,gettemp);
											else if(finder!=-1)
												snprintf(printer,999,"%s = t%d",functable[actfuncindex].paramtable[finder].finalname,gettemp);
											else
												snprintf(printer,999,"%s = t%d",functable[0].vartable[gchecker].finalname,gettemp);

											releaseint(gettemp);

										}										
									}
									GenQuad(printer);
								}

							}
			| ARRF EQ COR    {
								backpatch($3.bplist,$3.bpcount,nextquad);
									if($1.arr!=-1 && $1.ind!=-1)
									{
										if($3.tempreg==-1)
										{
											CallError("Void function does not return anything.");
										}
										else if($3.tempreg==-2)
										{
									CallError("Some error in assignment.");
										
										}
										else
										{
											char printer[1000];
											if(!strcmp($3.type,"int"))
											{
												if(!strcmp($1.type,"int"))
												{
													snprintf(printer,999,"t%d[t%d] = t%d",$1.arr,$1.ind,$3.tempreg);
													releaseint($3.tempreg);

												}
												else
												{
													int gettemp=newfloat();
													snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp,$3.tempreg);
													GenQuad(printer);
													releaseint($3.tempreg);
													
										
													snprintf(printer,999,"t%d[t%d] = f%d",$1.arr,$1.ind,gettemp);

													releasefloat(gettemp);
												}
											}
											if(!strcmp($3.type,"float"))
											{
												if(!strcmp($1.type,"float"))
												{
													
													snprintf(printer,999,"t%d[t%d] = f%d",$1.arr,$1.ind,$3.tempreg);

													releasefloat($3.tempreg);

												}
												else
												{
													int gettemp=newint();
													snprintf(printer,999,"t%d = ConvertToInt(f%d)",gettemp,$3.tempreg);
													GenQuad(printer);
													releasefloat($3.tempreg);
												
													snprintf(printer,999,"t%d[t%d] = t%d",$1.arr,$1.ind,gettemp);

													releaseint(gettemp);

												}										
											}
										GenQuad(printer);
										releaseint($1.arr);
										releaseint($1.ind);
									}
							}
							}
			;
ASSIGN : ID EQ COR SC       {
																backpatch($3.bplist,$3.bpcount,nextquad);
								int finder;
								int checker,gchecker;
								finder = InArr(functable[actfuncindex].paramtable,functable[actfuncindex].paramcount,$1.vali); 
								checker = InArr(functable[actfuncindex].vartable,functable[actfuncindex].varcount,$1.vali);
								gchecker = InArr(functable[0].vartable,functable[0].varcount,$1.vali);

								if(checker==-1 && finder==-1 && gchecker==-1)
								{
									char printer[1000];
									snprintf(printer,999,"No such variable called %s exists",$1.vali);
									CallError(printer);
								}
								if(checker!=-1)
									strcpy($1.type,functable[actfuncindex].vartable[checker].vartype);
								else if (finder!=-1)
									strcpy($1.type,functable[actfuncindex].paramtable[finder].vartype);
								else if(gchecker!=-1)
									strcpy($1.type,functable[0].vartable[gchecker].vartype);


								if($3.tempreg==-1)
								{
									CallError("Void function does not return anything.");
								}
								else if($3.tempreg==-2)
								{
									CallError("Some error in assignment.");
								}
								else
								{
									char printer[1000];
									if(!strcmp($3.type,"int"))
									{
										if(!strcmp($1.type,"int"))
										{
											if(checker!=-1)
												snprintf(printer,999,"%s = t%d",functable[actfuncindex].vartable[checker].finalname,$3.tempreg);
											else if(finder!=-1)
												snprintf(printer,999,"%s = t%d",functable[actfuncindex].paramtable[finder].finalname,$3.tempreg);
											else
												snprintf(printer,999,"%s = t%d",functable[0].vartable[gchecker].finalname,$3.tempreg);

											releaseint($3.tempreg);

										}
										else
										{
											int gettemp=newfloat();
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp,$3.tempreg);
											GenQuad(printer);
											releaseint($3.tempreg);
											if(checker!=-1)
												snprintf(printer,999,"%s = f%d",functable[actfuncindex].vartable[checker].finalname,gettemp);
											else if(finder!=-1)
												snprintf(printer,999,"%s = f%d",functable[actfuncindex].paramtable[finder].finalname,gettemp);
											else
												snprintf(printer,999,"%s = f%d",functable[0].vartable[gchecker].finalname,gettemp);

											releasefloat(gettemp);
										}
									}
									if(!strcmp($3.type,"float"))
									{
										if(!strcmp($1.type,"float"))
										{
											if(checker!=-1)
												snprintf(printer,999,"%s = f%d",functable[actfuncindex].vartable[checker].finalname,$3.tempreg);
											else if(finder!=-1)
												snprintf(printer,999,"%s = f%d",functable[actfuncindex].paramtable[finder].finalname,$3.tempreg);
											else
												snprintf(printer,999,"%s = f%d",functable[0].vartable[gchecker].finalname,$3.tempreg);

											releasefloat($3.tempreg);

										}
										else
										{
											int gettemp=newint();
											snprintf(printer,999,"t%d = ConvertToInt(f%d)",gettemp,$3.tempreg);
											GenQuad(printer);
											releasefloat($3.tempreg);
											if(checker!=-1)
												snprintf(printer,999,"%s = t%d",functable[actfuncindex].vartable[checker].finalname,gettemp);
											else if(finder!=-1)
												snprintf(printer,999,"%s = t%d",functable[actfuncindex].paramtable[finder].finalname,gettemp);
											else
												snprintf(printer,999,"%s = t%d",functable[0].vartable[gchecker].finalname,gettemp);

											releaseint(gettemp);

										}										
									}
									GenQuad(printer);
								}

							}
		| ARRF EQ COR SC     {
									backpatch($3.bplist,$3.bpcount,nextquad);
									if($1.arr!=-1 && $1.ind!=-1)
									{
										if($3.tempreg==-1)
										{
											CallError("Void function does not return anything.");
										}
										else if($3.tempreg==-2)
										{
									CallError("Some error in assignment.");
										
										}
										else
										{
											char printer[1000];
											if(!strcmp($3.type,"int"))
											{
												if(!strcmp($1.type,"int"))
												{
													snprintf(printer,999,"t%d[t%d] = t%d",$1.arr,$1.ind,$3.tempreg);
													releaseint($3.tempreg);

												}
												else
												{
													int gettemp=newfloat();
													snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp,$3.tempreg);
													GenQuad(printer);
													releaseint($3.tempreg);
													
										
													snprintf(printer,999,"t%d[t%d] = f%d",$1.arr,$1.ind,gettemp);

													releasefloat(gettemp);
												}
											}
											if(!strcmp($3.type,"float"))
											{
												if(!strcmp($1.type,"float"))
												{
													
													snprintf(printer,999,"t%d[t%d] = f%d",$1.arr,$1.ind,$3.tempreg);

													releasefloat($3.tempreg);

												}
												else
												{
													int gettemp=newint();
													snprintf(printer,999,"t%d = ConvertToInt(f%d)",gettemp,$3.tempreg);
													GenQuad(printer);
													releasefloat($3.tempreg);
												
													snprintf(printer,999,"t%d[t%d] = t%d",$1.arr,$1.ind,gettemp);

													releaseint(gettemp);

												}										
											}
										GenQuad(printer);
										releaseint($1.arr);
										releaseint($1.ind);
									}
							}
							}
		;

COR	: COR OR CAND               {
									backpatch($3.bplist,$3.bpcount,nextquad);
									if($1.countor==0)
									{
										$$.countor=1;

										int gettemp;
										gettemp=newint();
										char printer[1000];
										snprintf(printer,999,"t%d = 0 ",gettemp);
										GenQuad(printer);
										int temp2=$1.tempreg;
										if(!strcmp($1.type,"float"))
										{
											temp2=newint();
											snprintf(printer,999,"t%d = ConvertToInt(f%d)",temp2,$1.tempreg);
											releasefloat($1.tempreg);
											GenQuad(printer);
										}

										snprintf(printer,999,"if(t%d == 0) goto %d",temp2,nextquad+3);
										GenQuad(printer);
										snprintf(printer,999,"t%d = 1",gettemp);
										GenQuad(printer);
										snprintf(printer,999,"goto _____");
										$1.bpcount=0;
										$1.bplist[$1.bpcount++]=nextquad;
										GenQuad(printer);
										releaseint(temp2);
										releaseint($1.tempreg);
										$1.tempreg=gettemp;
									}
									int getcase = GiveType($1.type,$3.type);
									if(getcase==0)
										strcpy($$.type,"errortype");
									else
										strcpy($$.type,"int");	
									$$.caseallow=$1.caseallow && $3.caseallow;
									

									char printer[1000];
									int temp2=$3.tempreg;
									if(!strcmp($3.type,"float"))
									{
										temp2=newint();
										snprintf(printer,999,"t%d = ConvertToInt(f%d)",temp2,$3.tempreg);
										releasefloat($3.tempreg);
										GenQuad(printer);
									}

									snprintf(printer,999,"if(t%d == 0) goto %d",temp2,nextquad+3);
									GenQuad(printer);
									snprintf(printer,999,"t%d = 1",$1.tempreg);
									GenQuad(printer);
									snprintf(printer,999,"goto _____");
									$$.bpcount=0;

									for(int i=0;i<$1.bpcount;i++)
									{
										$$.bplist[$$.bpcount++]=$1.bplist[i];
									}
									$$.bplist[$$.bpcount++]=nextquad;

									GenQuad(printer);
									releaseint(temp2);
									releaseint($3.tempreg);
									$$.tempreg=$1.tempreg;

								}
		| CAND  				{
									
									backpatch($1.bplist,$1.bpcount,nextquad);
									$$.bpcount=0;
									strcpy($$.type,$1.type);
									$$.caseallow=$1.caseallow;
									$$.tempreg=$1.tempreg;
									$$.countor=0;


								}
		;
CAND : CAND AND CNOT  			{
									if($1.countand==0)
									{
										$$.countand=1;
										int gettemp;
										gettemp=newint();
										char printer[1000];
										snprintf(printer,999,"t%d = 1 ",gettemp);
										GenQuad(printer);

										int temp2=$1.tempreg;
										if(!strcmp($1.type,"float"))
										{
											temp2=newint();
											snprintf(printer,999,"t%d = ConvertToInt(f%d)",temp2,$1.tempreg);
											releasefloat($1.tempreg);
											GenQuad(printer);
										}


										snprintf(printer,999,"if(t%d != 0) goto %d",temp2,nextquad+3);
										GenQuad(printer);
										snprintf(printer,999,"t%d = 0",gettemp);
										GenQuad(printer);
										snprintf(printer,999,"goto _____");
										
										$1.bpcount=0;
										$1.bplist[$1.bpcount++]=nextquad;
										GenQuad(printer);
										releaseint(temp2);
										releaseint($1.tempreg);
										$1.tempreg=gettemp;
									}
									int getcase = GiveType($1.type,$3.type);
									if(getcase==0)
										strcpy($$.type,"errortype");
									else
										strcpy($$.type,"int");
									$$.caseallow=$1.caseallow && $3.caseallow;

									char printer[1000];
									int temp2=$3.tempreg;
									if(!strcmp($3.type,"float"))
									{
										temp2=newint();
										snprintf(printer,999,"t%d = ConvertToInt(f%d)",temp2,$3.tempreg);
										releasefloat($3.tempreg);
										GenQuad(printer);
									}

									snprintf(printer,999,"if(t%d != 0) goto %d",temp2,nextquad+3);
									GenQuad(printer);
									snprintf(printer,999,"t%d = 0",$1.tempreg);
									GenQuad(printer);
									snprintf(printer,999,"goto _____");
									$$.bpcount=0;
									for(int i=0;i<$1.bpcount;i++)
									{
										$$.bplist[$$.bpcount++]=$1.bplist[i];
									}
									$$.bplist[$$.bpcount++]=nextquad;

									GenQuad(printer);
									releaseint(temp2);
									releaseint($3.tempreg);
									$$.tempreg=$1.tempreg;

									

								}
		| CNOT                  {
									$$.bpcount=0;
									strcpy($$.type,$1.type);
									$$.caseallow=$1.caseallow;
									$$.tempreg=$1.tempreg;
									$$.countand=0;


								}
		;
CNOT : ECOMP  					{
									strcpy($$.type,$1.type);
									$$.caseallow=$1.caseallow;
									$$.tempreg=$1.tempreg;

								
								}
		| NOT ECOMP 			{
									if(!strcmp($1.type,"errortype"))
									strcpy($$.type,"errortype");
									else
									strcpy($$.type,"int");
									$$.caseallow=$2.caseallow;

									int gettemp;
									gettemp=newint();
									char printer[1000];
									snprintf(printer,999,"t%d = 1 ",gettemp);
									GenQuad(printer);
									int temp2=$2.tempreg;
									if(!strcmp($2.type,"float"))
									{
										temp2=newint();
										snprintf(printer,999,"t%d = ConvertToInt(f%d)",temp2,$2.tempreg);
										releasefloat($2.tempreg);
										GenQuad(printer);
									}

									snprintf(printer,999,"if(t%d == 0) goto %d",temp2,nextquad+2);
									GenQuad(printer);
									snprintf(printer,999,"t%d = 0",gettemp);
									GenQuad(printer);
									releaseint(temp2);
									releaseint($2.tempreg);
									$$.tempreg=gettemp;
								}
		;
ECOMP : ECOMP LT E              {
									int getcase = GiveType($1.type,$3.type);
									if(getcase==0)
										strcpy($$.type,"errortype");
									else
										strcpy($$.type,"int");
									$$.caseallow=$1.caseallow && $3.caseallow;
									int gettemp;
									if(getcase==1)
									{
										if(!strcmp($1.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$1.tempreg);
											GenQuad(printer);
											releaseint($1.tempreg);
											gettemp = newint();
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(f%d < f%d) goto %d",gettemp2,$3.tempreg,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($3.tempreg);
										}
										else if(!strcmp($3.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$3.tempreg);
											GenQuad(printer);
											releaseint($3.tempreg);
											gettemp = newint();
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(f%d < f%d) goto %d",$1.tempreg,gettemp2,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($1.tempreg);
										}
										else
										{
											char printer[1000];
											gettemp = newint();
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(f%d < f%d) goto %d",$1.tempreg,$3.tempreg,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releasefloat($1.tempreg);
											releasefloat($3.tempreg);
										}
										
									
									}

									else if(getcase==2)
									{
											gettemp = newint();
											char printer[1000];
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(t%d < t%d) goto %d",$1.tempreg,$3.tempreg,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releaseint($3.tempreg);
											releaseint($1.tempreg);
									}
									$$.tempreg=gettemp;
								}
		| ECOMP LTE E  			{
									int getcase = GiveType($1.type,$3.type);
									if(getcase==0)
										strcpy($$.type,"errortype");
									else
										strcpy($$.type,"int");
									$$.caseallow=$1.caseallow && $3.caseallow;

									int gettemp;
									if(getcase==1)
									{
										if(!strcmp($1.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$1.tempreg);
											GenQuad(printer);
											releaseint($1.tempreg);
											gettemp = newint();
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(f%d <= f%d) goto %d",gettemp2,$3.tempreg,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($3.tempreg);
										}
										else if(!strcmp($3.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$3.tempreg);
											GenQuad(printer);
											releaseint($3.tempreg);
											gettemp = newint();
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(f%d <= f%d) goto %d",$1.tempreg,gettemp2,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($1.tempreg);
										}
										else
										{
											char printer[1000];
											gettemp = newint();
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(f%d <= f%d) goto %d",$1.tempreg,$3.tempreg,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releasefloat($1.tempreg);
											releasefloat($3.tempreg);
										}
										
									
									}

									else if(getcase==2)
									{
											gettemp = newint();
											char printer[1000];
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(t%d <= t%d) goto %d",$1.tempreg,$3.tempreg,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releaseint($3.tempreg);
											releaseint($1.tempreg);
									}
									$$.tempreg=gettemp;
								
								}
		| ECOMP GT E 			{
									int getcase = GiveType($1.type,$3.type);
									if(getcase==0)
										strcpy($$.type,"errortype");
									else
										strcpy($$.type,"int");
									$$.caseallow=$1.caseallow && $3.caseallow;

									int gettemp;
									if(getcase==1)
									{
										if(!strcmp($1.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$1.tempreg);
											GenQuad(printer);
											releaseint($1.tempreg);
											gettemp = newint();
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(f%d > f%d) goto %d",gettemp2,$3.tempreg,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($3.tempreg);
										}
										else if(!strcmp($3.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$3.tempreg);
											GenQuad(printer);
											releaseint($3.tempreg);
											gettemp = newint();
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(f%d > f%d) goto %d",$1.tempreg,gettemp2,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($1.tempreg);
										}
										else
										{
											char printer[1000];
											gettemp = newint();
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(f%d > f%d) goto %d",$1.tempreg,$3.tempreg,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releasefloat($1.tempreg);
											releasefloat($3.tempreg);
										}

										
									
									}

									else if(getcase==2)
									{
											gettemp = newint();
											char printer[1000];
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(t%d > t%d) goto %d",$1.tempreg,$3.tempreg,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releaseint($3.tempreg);
											releaseint($1.tempreg);
									}
									$$.tempreg=gettemp;
								
								}
		| ECOMP GTE E           {
									int getcase = GiveType($1.type,$3.type);
									if(getcase==0)
										strcpy($$.type,"errortype");
									else
										strcpy($$.type,"int");
									$$.caseallow=$1.caseallow && $3.caseallow;

									int gettemp;
									if(getcase==1)
									{
										if(!strcmp($1.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$1.tempreg);
											GenQuad(printer);
											releaseint($1.tempreg);
											gettemp = newint();
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(f%d >= f%d) goto %d",gettemp2,$3.tempreg,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($3.tempreg);
										}
										else if(!strcmp($3.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$3.tempreg);
											GenQuad(printer);
											releaseint($3.tempreg);
											gettemp = newint();
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(f%d >= f%d) goto %d",$1.tempreg,gettemp2,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($1.tempreg);
										}
										else
										{
											char printer[1000];
											gettemp = newint();
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(f%d >= f%d) goto %d",$1.tempreg,$3.tempreg,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releasefloat($1.tempreg);
											releasefloat($3.tempreg);
										}
										
									
									}

									else if(getcase==2)
									{
											gettemp = newint();
											char printer[1000];
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(t%d >= t%d) goto %d",$1.tempreg,$3.tempreg,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releaseint($3.tempreg);
											releaseint($1.tempreg);
									}
									$$.tempreg=gettemp;
								
								}
		| ECOMP NEQ E           {
									int getcase = GiveType($1.type,$3.type);
									if(getcase==0)
										strcpy($$.type,"errortype");
									else
										strcpy($$.type,"int");
									$$.caseallow=$1.caseallow && $3.caseallow;

									int gettemp;
									if(getcase==1)
									{
										if(!strcmp($1.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$1.tempreg);
											GenQuad(printer);
											releaseint($1.tempreg);
											gettemp = newint();
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(f%d != f%d) goto %d",gettemp2,$3.tempreg,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($3.tempreg);
										}
										else if(!strcmp($3.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$3.tempreg);
											GenQuad(printer);
											releaseint($3.tempreg);
											gettemp = newint();
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(f%d != f%d) goto %d",$1.tempreg,gettemp2,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($1.tempreg);
										}
										else
										{
											char printer[1000];
											gettemp = newint();
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(f%d != f%d) goto %d",$1.tempreg,$3.tempreg,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releasefloat($1.tempreg);
											releasefloat($3.tempreg);
										}
										
									
									}

									else if(getcase==2)
									{
											gettemp = newint();
											char printer[1000];
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(t%d != t%d) goto %d",$1.tempreg,$3.tempreg,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releaseint($3.tempreg);
											releaseint($1.tempreg);
									}
									$$.tempreg=gettemp;

								}
		| ECOMP EQEQ E          {
									int getcase = GiveType($1.type,$3.type);
									if(getcase==0)
										strcpy($$.type,"errortype");
									else
										strcpy($$.type,"int");
									$$.caseallow=$1.caseallow && $3.caseallow;

									int gettemp;
									if(getcase==1)
									{
										if(!strcmp($1.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$1.tempreg);
											GenQuad(printer);
											releaseint($1.tempreg);
											gettemp = newint();
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(f%d == f%d) goto %d",gettemp2,$3.tempreg,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($3.tempreg);
										}
										else if(!strcmp($3.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$3.tempreg);
											GenQuad(printer);
											releaseint($3.tempreg);
											gettemp = newint();
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(f%d == f%d) goto %d",$1.tempreg,gettemp2,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($1.tempreg);
										}
										else
										{
											char printer[1000];
											gettemp = newint();
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(f%d == f%d) goto %d",$1.tempreg,$3.tempreg,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releasefloat($1.tempreg);
											releasefloat($3.tempreg);
										}
										
									
									}

									else if(getcase==2)
									{
											gettemp = newint();
											char printer[1000];
											snprintf(printer,999,"t%d = 1",gettemp);
											GenQuad(printer);
											
											snprintf(printer,999,"if(t%d == t%d) goto %d",$1.tempreg,$3.tempreg,nextquad+2);
											GenQuad(printer);
											snprintf(printer,999,"t%d = 0",gettemp);
											GenQuad(printer);
											releaseint($3.tempreg);
											releaseint($1.tempreg);
									}
									$$.tempreg=gettemp;

								}
		| E 					{
									strcpy($$.type,$1.type);
									$$.tempreg=$1.tempreg;
									$$.caseallow=$1.caseallow;

								}
		;
E : E PLUS T                    {
									int gettemp;
									
									int getcase = GiveType($1.type,$3.type);
									if(getcase==0)
										strcpy($$.type,"errortype");
									if(getcase==1){
										strcpy($$.type,"float");
										if(!strcmp($1.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
									
											
									
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$1.tempreg);
											

											GenQuad(printer);
											
											releaseint($1.tempreg);

											gettemp = newfloat();
											snprintf(printer,999,"f%d = f%d + f%d",gettemp,gettemp2,$3.tempreg);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($3.tempreg);



										}
										else if(!strcmp($3.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$3.tempreg);
											GenQuad(printer);
											releaseint($3.tempreg);

											gettemp = newfloat();

											snprintf(printer,999,"f%d = f%d + f%d",gettemp,$1.tempreg,gettemp2);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($1.tempreg);

										}
										else
										{
											gettemp=newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = f%d + f%d",gettemp,$1.tempreg,$3.tempreg);
											GenQuad(printer);
											releasefloat($3.tempreg);
											releasefloat($1.tempreg);
										}
									}
									if(getcase==2){
										strcpy($$.type,"int");
										gettemp = newint();
										char printer[1000];

										snprintf(printer,999,"t%d = t%d + t%d",gettemp,$1.tempreg,$3.tempreg);
										GenQuad(printer);
										releaseint($3.tempreg);
										releaseint($1.tempreg);

									}
									$$.tempreg = gettemp;
									$$.caseallow=$1.caseallow && $3.caseallow;


								}
	| E MINUS T 				{
									int gettemp;
									
									int getcase = GiveType($1.type,$3.type);
									if(getcase==0)
										strcpy($$.type,"errortype");
									if(getcase==1){
										strcpy($$.type,"float");
										if(!strcmp($1.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
									
											
									
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$1.tempreg);
											

											GenQuad(printer);
											
											releaseint($1.tempreg);

											gettemp = newfloat();
											snprintf(printer,999,"f%d = f%d - f%d",gettemp,gettemp2,$3.tempreg);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($3.tempreg);



										}
										else if(!strcmp($3.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$3.tempreg);
											GenQuad(printer);
											releaseint($3.tempreg);

											gettemp = newfloat();

											snprintf(printer,999,"f%d = f%d - f%d",gettemp,$1.tempreg,gettemp2);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($1.tempreg);

										}
										else
										{
											gettemp=newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = f%d - f%d",gettemp,$1.tempreg,$3.tempreg);
											GenQuad(printer);
											releasefloat($3.tempreg);
											releasefloat($1.tempreg);
										}
									}
									if(getcase==2){
										strcpy($$.type,"int");
										gettemp = newint();
										char printer[1000];

										snprintf(printer,999,"t%d = t%d - t%d",gettemp,$1.tempreg,$3.tempreg);
										GenQuad(printer);
										releaseint($3.tempreg);
										releaseint($1.tempreg);

									}
									$$.tempreg = gettemp;
									$$.caseallow=$1.caseallow && $3.caseallow;


								}
	| T 						{
									strcpy($$.type,$1.type);
									$$.tempreg=$1.tempreg;
									$$.caseallow=$1.caseallow;

								}
	;
T : T MULT F 					{
									int gettemp;
									
									int getcase = GiveType($1.type,$3.type);
									if(getcase==0)
										strcpy($$.type,"errortype");
									if(getcase==1){
										strcpy($$.type,"float");
										if(!strcmp($1.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
									
											
									
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$1.tempreg);
											

											GenQuad(printer);
											
											releaseint($1.tempreg);

											gettemp = newfloat();
											snprintf(printer,999,"f%d = f%d * f%d",gettemp,gettemp2,$3.tempreg);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($3.tempreg);



										}
										else if(!strcmp($3.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$3.tempreg);
											GenQuad(printer);
											releaseint($3.tempreg);

											gettemp = newfloat();

											snprintf(printer,999,"f%d = f%d * f%d",gettemp,$1.tempreg,gettemp2);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($1.tempreg);

										}
										else
										{
											gettemp=newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = f%d * f%d",gettemp,$1.tempreg,$3.tempreg);
											GenQuad(printer);
											releasefloat($3.tempreg);
											releasefloat($1.tempreg);
										}
									}
									if(getcase==2){
										strcpy($$.type,"int");
										gettemp = newint();
										char printer[1000];

										snprintf(printer,999,"t%d = t%d * t%d",gettemp,$1.tempreg,$3.tempreg);
										GenQuad(printer);
										releaseint($3.tempreg);
										releaseint($1.tempreg);

									}
									$$.tempreg = gettemp;
									$$.caseallow=$1.caseallow && $3.caseallow;

									



								}
	| T DIV F                   {
									int gettemp;
									
									int getcase = GiveType($1.type,$3.type);
									if(getcase==0)
										strcpy($$.type,"errortype");
									if(getcase==1){
										strcpy($$.type,"float");
										if(!strcmp($1.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
									
											
									
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$1.tempreg);
											

											GenQuad(printer);
											
											releaseint($1.tempreg);

											gettemp = newfloat();
											snprintf(printer,999,"f%d = f%d / f%d",gettemp,gettemp2,$3.tempreg);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($3.tempreg);



										}
										else if(!strcmp($3.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$3.tempreg);
											GenQuad(printer);
											releaseint($3.tempreg);

											gettemp = newfloat();

											snprintf(printer,999,"f%d = f%d / f%d",gettemp,$1.tempreg,gettemp2);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($1.tempreg);

										}
										else
										{
											gettemp=newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = f%d / f%d",gettemp,$1.tempreg,$3.tempreg);
											GenQuad(printer);
											releasefloat($3.tempreg);
											releasefloat($1.tempreg);
										}
									}
									if(getcase==2){
										strcpy($$.type,"int");
										gettemp = newint();
										char printer[1000];

										snprintf(printer,999,"t%d = t%d / t%d",gettemp,$1.tempreg,$3.tempreg);
										GenQuad(printer);
										releaseint($3.tempreg);
										releaseint($1.tempreg);

									}
									$$.tempreg = gettemp;
									$$.caseallow=$1.caseallow && $3.caseallow;


								}
	| T MOD F 					{
									int gettemp;
									
									int getcase = GiveType($1.type,$3.type);
									if(getcase==0)
										strcpy($$.type,"errortype");
									if(getcase==1){
										strcpy($$.type,"float");
										if(!strcmp($1.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
									
											
									
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$1.tempreg);
											

											GenQuad(printer);
											
											releaseint($1.tempreg);

											gettemp = newfloat();
											snprintf(printer,999,"f%d = f%d %% f%d",gettemp,gettemp2,$3.tempreg);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($3.tempreg);



										}
										else if(!strcmp($3.type,"int"))
										{
											int gettemp2;
											gettemp2 = newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = ConvertToFloat(t%d)",gettemp2,$3.tempreg);
											GenQuad(printer);
											releaseint($3.tempreg);

											gettemp = newfloat();

											snprintf(printer,999,"f%d = f%d %% f%d",gettemp,$1.tempreg,gettemp2);
											GenQuad(printer);
											releasefloat(gettemp2);
											releasefloat($1.tempreg);

										}
										else
										{
											gettemp=newfloat();
											char printer[1000];
											snprintf(printer,999,"f%d = f%d %% f%d",gettemp,$1.tempreg,$3.tempreg);
											GenQuad(printer);
											releasefloat($3.tempreg);
											releasefloat($1.tempreg);
										}
									}
									if(getcase==2){
										strcpy($$.type,"int");
										gettemp = newint();
										char printer[1000];

										snprintf(printer,999,"t%d = t%d %% t%d",gettemp,$1.tempreg,$3.tempreg);
										GenQuad(printer);
										releaseint($3.tempreg);
										releaseint($1.tempreg);

									}
									$$.tempreg = gettemp;
									$$.caseallow=$1.caseallow && $3.caseallow;

								}

	| F 						{
									strcpy($$.type,$1.type);
									$$.tempreg=$1.tempreg;
									$$.caseallow=$1.caseallow;


								}
	;
F : ID 							{
									int find = InArr(functable[actfuncindex].vartable,functable[actfuncindex].varcount,$1.vali);
									int pfind = InArr(functable[actfuncindex].paramtable,functable[actfuncindex].paramcount,$1.vali);
									int gfind = InArr(functable[0].vartable,functable[0].varcount,$1.vali);

									if(find==-1 && pfind==-1 && gfind==-1)
									{
										char printer1[1000];
										snprintf(printer1,999,"No such variable called %s exists",$1.vali);
										CallError(printer1);
										strcpy($$.type,"errortype");

									}
									else
									{
										if(find!=-1 && functable[actfuncindex].vartable[find].dimcount>0)
										{
											CallError("Arrays can't be used directly like this.");
										}

										int gettemp;

										if(find!=-1)
										{
											strcpy($$.type,functable[actfuncindex].vartable[find].vartype);

												if(!strcmp($$.type,"int"))
												{
													gettemp = newint();

													char printer[1000];
													snprintf(printer,999,"t%d = %s",gettemp,functable[actfuncindex].vartable[find].finalname);

													GenQuad(printer);
												}
												else
												{
													gettemp = newfloat();

													char printer[1000];
													snprintf(printer,999,"f%d = %s",gettemp,functable[actfuncindex].vartable[find].finalname);
													GenQuad(printer);
												}

										}
										else if(pfind!=-1)
										{
											strcpy($$.type,functable[actfuncindex].paramtable[pfind].vartype);

												if(!strcmp($$.type,"int"))
												{
													gettemp = newint();

													char printer[1000];
													snprintf(printer,999,"t%d = %s",gettemp,functable[actfuncindex].paramtable[pfind].finalname);
													GenQuad(printer);

			
												}
												else
												{
													gettemp = newfloat();
													char printer[1000];
													snprintf(printer,999,"f%d = %s",gettemp,functable[actfuncindex].paramtable[pfind].finalname);
													GenQuad(printer);
													
												}
										}
										else if(gfind!=-1)
										{
											if(gfind!=-1 && functable[0].vartable[gfind].dimcount>0)
											{
												CallError("Arrays can't be used directly like this.");
											}
											strcpy($$.type,functable[0].vartable[gfind].vartype);

												if(!strcmp($$.type,"int"))
												{
													gettemp = newint();

													char printer[1000];
													snprintf(printer,999,"t%d = %s",gettemp,functable[0].vartable[gfind].finalname);

													GenQuad(printer);
												}
												else
												{
													gettemp = newfloat();

													char printer[1000];
													snprintf(printer,999,"f%d = %s",gettemp,functable[0].vartable[gfind].finalname);
													GenQuad(printer);
												}
										}
										$$.tempreg=gettemp;

									}
									$$.caseallow=false;
								}							

	| NUM						{
									int gettemp;
									int t = strlen($1.vali);
									int i=0;
									bool isf=false;
									for(i=0;i<t;i++)
									{
										if($1.vali[i]=='.')
										{
										isf=true;
										break;
										}
									}
									if(isf)
									{
										strcpy($$.type,"float");

										gettemp = newfloat();
										char printer[1000];
										snprintf(printer,999,"f%d = %s",gettemp,$1.vali);
										GenQuad(printer);

										
									}
									else
									{
										strcpy($$.type,"int");
										gettemp = newint();

										char printer[1000];
										snprintf(printer,999,"t%d = %s",gettemp,$1.vali);
										GenQuad(printer);
									}
									$$.tempreg=gettemp;

									$$.caseallow=true;



								}
	| FUNC_CALL 				{
									strcpy($$.type,$1.type);
									$$.tempreg=$1.tempreg;

									if($$.tempreg==-1)
									{
										CallError("Void Function does not return anything.");
									}
									$$.caseallow=false;



								}     
	| OPT COR CPT 				{
									strcpy($$.type,$2.type);
									$$.tempreg=$2.tempreg;

									$$.caseallow=$2.caseallow;
									backpatch($2.bplist,$2.bpcount,nextquad);


								}
	| ARRF  					{
									int tempreg=-2;
									char printer[1000];

									if($1.arr!=-1 && $1.ind!=-1)
									{
										if(!strcmp($1.type,"int"))
										{
											tempreg = newint();
											snprintf(printer,999,"t%d = t%d[t%d]",tempreg,$1.arr,$1.ind);
											GenQuad(printer);
											releaseint($1.arr);
											releaseint($1.ind);
										}
										else if(!strcmp($1.type,"float"))
										{
											tempreg = newfloat();
											snprintf(printer,999,"f%d = t%d[t%d]",tempreg,$1.arr,$1.ind);
											GenQuad(printer);
											releaseint($1.arr);
											releaseint($1.ind);
										}
									}
									strcpy($$.type,$1.type);
									$$.tempreg=tempreg;
									$$.caseallow=false;

								}
	;


ARRF : ID ARRFLIST 				{
									$$.arr=-1;
									$$.ind=-1;
									strcpy($$.type,"errortype");


									int find = InArr(functable[actfuncindex].vartable,functable[actfuncindex].varcount,$1.vali);
									int gfind = InArr(functable[0].vartable,functable[0].varcount,$1.vali);

									if(find==-1 && gfind==-1)
									{
										char printer1[1000];
										snprintf(printer1,999,"No such variable called %s exists",$1.vali);
										CallError(printer1);
										strcpy($$.type,"errortype");

									}
									else if(find!=-1)
									{
										if(find!=-1 && functable[actfuncindex].vartable[find].dimcount==0)
										{
											CallError("Such indexing not possible in simple variables.");
										}
										else
										{
											if(functable[actfuncindex].vartable[find].dimcount!=$2.bpcount)
											{
												CallError("Number of dimensions not matching in array use.");	
											}
											else 
											{
												int getarr = newint();
												char printer[1000];
												snprintf(printer,999,"Load t%d %s",getarr,functable[actfuncindex].vartable[find].finalname);
												GenQuad(printer);

												int getindex = newint();
												int extra = newint();

												snprintf(printer,999,"t%d = 0",getindex);
												GenQuad(printer);

												for(int i=0;i<$2.bpcount;i++)
												{
													snprintf(printer,999,"t%d = %d",extra,functable[actfuncindex].vartable[find].moddim[i]);
													GenQuad(printer);

													snprintf(printer,999,"t%d = t%d * t%d",extra,extra,$2.bplist[i]);
													releaseint($2.bplist[i]);
													GenQuad(printer);

													snprintf(printer,999,"t%d = t%d + t%d",getindex,getindex,extra);
													GenQuad(printer);
												}

												snprintf(printer,999,"t%d = 4",extra);
												GenQuad(printer);
												snprintf(printer,999,"t%d = t%d * t%d",getindex,getindex,extra);
												GenQuad(printer);

												releaseint(extra);

												$$.arr=getarr;
												$$.ind=getindex;
												strcpy($$.type,functable[actfuncindex].vartable[find].vartype);
											}	
										}
									}
									else if(gfind!=-1)
									{
										if(gfind!=-1 && functable[0].vartable[gfind].dimcount==0)
										{
											CallError("Such indexing not possible in simple variables.");
										}
										else
										{
											if(functable[0].vartable[gfind].dimcount!=$2.bpcount)
											{
												CallError("Number of dimensions not matching in array use.");	
											}
											else 
											{
												int getarr = newint();
												char printer[1000];
												snprintf(printer,999,"Load t%d %s",getarr,functable[0].vartable[gfind].finalname);
												GenQuad(printer);

												int getindex = newint();
												int extra = newint();

												snprintf(printer,999,"t%d = 0",getindex);
												GenQuad(printer);

												for(int i=0;i<$2.bpcount;i++)
												{
													snprintf(printer,999,"t%d = %d",extra,functable[0].vartable[gfind].moddim[i]);
													GenQuad(printer);

													snprintf(printer,999,"t%d = t%d * t%d",extra,extra,$2.bplist[i]);
													releaseint($2.bplist[i]);
													GenQuad(printer);

													snprintf(printer,999,"t%d = t%d + t%d",getindex,getindex,extra);
													GenQuad(printer);
												}

												snprintf(printer,999,"t%d = 4",extra);
												GenQuad(printer);
												snprintf(printer,999,"t%d = t%d * t%d",getindex,getindex,extra);
												GenQuad(printer);

												releaseint(extra);

												$$.arr=getarr;
												$$.ind=getindex;
												strcpy($$.type,functable[0].vartable[gfind].vartype);
											}	
										}
									}
								}
		;

ARRFLIST : ARRFLIST OSQ COR CSQ     {
										backpatch($3.bplist,$3.bpcount,nextquad);
										if(strcmp($3.type,"int"))
										{
											CallError("Array indices should compute to integers.");
										}
										$$.bpcount=0;
										for(int i=0;i<$1.bpcount;i++)
										{
											$$.bplist[$$.bpcount++]=$1.bplist[i];
										}
										$$.bplist[$$.bpcount++]=$3.tempreg;
									}
		| OSQ COR CSQ 				{
										backpatch($2.bplist,$2.bpcount,nextquad);
										if(strcmp($2.type,"int"))
										{
											CallError("Array indices should compute to integers.");
										}
										$$.bpcount=0;

										$$.bplist[$$.bpcount++]=$2.tempreg;
									}
		;

SWITCH : SWITCHET OCURLY CASES CCURLY 		{
												
												$$.bpcount=0;
												int i;
												for(i=0;i<$3.bpcount;i++){
													$$.bplist[$$.bpcount++]=$3.bplist[i];
												}
												
											}
		; 

SWITCHET : SWITCHT  OPT COR CPT 			{
												canbreak++;
												if(strcmp($3.type,"int"))
												{
												CallError("Switch should have integer resulting expression.");
												}
												backpatch($3.bplist,$3.bpcount,nextquad);
												switchglobal=$3.tempreg;
											}
			;
CASES : CASELIST MCASE DEFAULTE {
									backpatch($1.bplist2,$1.bpcount2,$2.quad);
									$$.bpcount=0;
								

									for(int i=0;i<$3.bpcount;i++)
									{
										$$.bplist[$$.bpcount++]=$3.bplist[i];
									}

								}
		| CASELIST				{
									$$.bpcount=0;
									for(int i=0;i<$1.bpcount2;i++)
										$$.bplist[$$.bpcount++]=$1.bplist2[i];
								}
		;

DEFAULTE : DEFAULT COLON SLIST   {
									$$.bpcount=0;
									for(int i=0;i<$3.bpcount;i++)
									{
										$$.bplist[$$.bpcount++]=$3.bplist[i];
									}
									
								 }
			;

CASELIST : CASELIST CASE  {
							
								backpatch($1.bplist2,$1.bpcount2,$2.quad);
								$$.bpcount2=0;
								for(int i=0;i<$2.bpcount2;i++)
								{
									$$.bplist2[$$.bpcount2++]=$2.bplist2[i];
								}
						  }
		   | CASE       {
		   				
							
							$$.bpcount2=0;
							for(int i=0;i<$1.bpcount2;i++)
							{
								$$.bplist2[$$.bpcount2++]=$1.bplist2[i];
							}
		   				}
		   ;
CASE : CASETEMP CMARK CBODY 							{
													
													
													$$.bpcount2=0;
													backpatch($3.bplist,$3.bpcount,nextquad);
													$$.bplist2[$$.bpcount2++]=nextquad;
													char printer[1000];
													snprintf(printer,999,"goto _____");
													GenQuad(printer);
													backpatch($1.bplist,$1.bpcount,nextquad);

													
													$$.quad=$2.quad;
												}
		;

CMARK : {$$.quad=nextquad;};
CASETEMP : CASET NCASE COR COLON      						{
	
																if(strcmp($3.type,"int"))
																{
																	CallError("Case label does not reduce to an integer constant.");
																}
																else if(!($3.caseallow))
																{
																	CallError("Case label should have only constant integer expressions.");
																}	
																backpatch($3.bplist,$3.bpcount,nextquad);
																char printer[1000];
																snprintf(printer,999,"if(t%d != t%d) goto _____",switchglobal,$3.tempreg);
																$$.bpcount=0;
																$$.bplist[$$.bpcount++]=nextquad;
																GenQuad(printer);
																releaseint($3.tempreg);
															}
			;                
CBODY : SLIST   {
					$$.bpcount=0;
					int i;
					for(i=0;i<$1.bpcount;i++)
						$$.bplist[$$.bpcount++]=$1.bplist[i];
				}
		;
MCASE : {$$.quad=nextquad;}; 
NCASE : ; 


%%

int GiveType(char s1[],char s2[])
{
	if(!strcmp(s1,"errortype") || !strcmp(s2,"errortype"))
	return 0;

	if(!strcmp(s1,"float") || !strcmp(s2,"float"))
	return 1;

	return 2;

}
int InArr (struct varrecord arr[],int size,char finder[])
{
	int i=0;
	for(i=size-1;i>=0;i--)
	{
		if(!strcmp(arr[i].varname,finder))
			return i;

	}
	return -1;
}

bool CheckVar (struct varrecord arr[],int size,char finder[],int level)
{
	int i=0;
	for(i=0;i<size;i++)
	{
		if(!strcmp(arr[i].varname,finder) && arr[i].level==level)
			return true;

	}
	return false;
}

void PrintVars(struct varrecord a)
{
	printf("%s %s",a.varname,a.vartype);
	if(a.tag)
	printf(" %s ","1");
	else
	printf(" %s ","0");
	printf("%d\n",a.level);
}

void PrintFuncs(struct funcrecord a)
{
	printf("%s %s\n",a.name,a.type);
	int i=0;

	printf("Parameters %d\n",a.paramcount);
	for(i=0;i<a.paramcount;i++)
		PrintVars(a.paramtable[i]);
	printf("==============================================\n");
	printf("Variables %d\n",a.varcount);
	for(i=0;i<a.varcount;i++)
		PrintVars(a.vartable[i]);
}

void backpatch(int* arr, int len, int x)
{
	for (int i = 0; i < len; ++i)
		for (int j = 0; j < len; ++j)
			if(arr[i]<arr[j])
			{
				int t=arr[i];
				arr[i]=arr[j];
				arr[j]=t;

			}

	

	fseek(fp,0,0);
	int currLineNumber = 1;
	for (int i = 0; i < len; ++i)
	{
		while(1)
		{
			if(currLineNumber == arr[i])
			{
				char temp[300];
				char tempi=0;
				while(1)
				{
					char cx = getc(fp);
					temp[tempi] = cx;
					tempi++;
					if(cx=='\n')
						break;
				}
				temp[tempi]='\0';

				char new[5];
				sprintf(new,"%d",x);
				
				for (int ix = 0; ix < strlen(new); ++ix)
					temp[tempi-6+ix]=new[ix];
				
				for (int iy = strlen(new); iy < 5; ++iy)
					temp[tempi-6+iy] = ' ';
				
				fseek(fp,-tempi,SEEK_CUR);
				fputs(temp, fp);
				currLineNumber++;
				break;
			}
			char c = getc(fp);
			if(c=='\n')
			{
				currLineNumber++;
			}
		}
	}
	fseek(fp, 0, SEEK_END);
}


void PrintFuncTable()
{
	int i=0;
	for(i=0;i<actfuncindex;i++)
		PrintFuncs(functable[i]);
}

void GenQuad(char*s)
{
	fprintf(fp,"%d: %s\n",nextquad,s);
	nextquad++;
}
void CallError(char*s)
{
	printf("Semantic Error at Line #%d : ",lines+1);
	printf("%s\n",s);
	success=false;
}

void CallWarning(char*s)
{
	printf("Semantic Warning at Line #%d : ",lines+1);
	printf("%s\n",s);
}

void yyerror (char *s) {
	success=false;
	printf("Syntax Error at line %d\n",lines+1);	
}

/*void despace(char target[], char input[], int l){
	int start=0, end=l-1;
	while(input[start]==' ' || input[start]=='\t') start++;
	while(input[end]==' ' || input[end]=='\t' || input[end]=='\n') end--;
	int y=0;
	for (int i = start; i <= end; ++i)
	{
		target[y++]=input[i];
	}
	target[y]='\0';
}*/
int newint()
{
	for(int i=0;i<10;i++)
	{
		if(!intreg[i])
			{intreg[i]=true;return i;}
	}
	return -1;
}
int newfloat()
{
	for(int i=0;i<10;i++)
	{
		if(!floatreg[i])
			{floatreg[i]=true;return i;}
	}
	return -1;
}
void releaseint(int i)
{
	if(i!=-1)
	intreg[i]=false;
}
void releasefloat(int i)
{
	if(i!=-1)
	floatreg[i]=false;
}
int stoi(char*s)
{
	int l=strlen(s);
	int ans=0;
	int i=0;
	for(i=0;i<l;i++)
	{
	ans=ans*10+(s[i]-48);
	}
	return ans;
}
bool isFtype(char line[],int n)
{
	for(int i=0;i<n;i++)
	{
		if(line[i]=='(')
		return true;
	}
	return false;
}
bool isVar(char line[],int n)
{
	for(int i=0;i<n;i++)
	{
		if(i==0)
		{
			if(line[i]>='a' && line[i]<='z' || line[i]>='A' && line[i]<='Z')
			{

			}
			else
			{
				return false;
			}
		}
		else
		{
			if(line[i]>='a' && line[i]<='z' || line[i]>='A' && line[i]<='Z' || line[i]>='0' && line[i]<='9' || line[i]=='_' )
			{

			}
			else
			{
				return false;
			}
		}
	}
	return true;
}

bool NotEmpty(char line[],int l)
{
	for(int i=0;i<l;i++)
	{
		if(line[i]==' ' || line[i]=='\t' || line[i]=='\n')
		{

		}
		else
		{
			return true;
		}
	}
	return false;
}

int main(int argc, char const * argv[])
{
    char filename[100];
    snprintf(filename,999,"%s",argv[1]);
    char filename1[100];
    char filename2[100];
    snprintf(filename1,999,"%s",argv[2]);
    snprintf(filename2,999,"%s",argv[3]);


	fil=fopen(filename,"r");

	char new_name[1000];
	snprintf(new_name,999,"%s_Modified.txt",filename);
	FILE*fil1=fopen(new_name,"w");

	int ctr=0;
	char line[1000];
	char nline[1000];
	
	bool app=true;
	char printer[1000];
	while(fgets(line,sizeof(line),fil))
	{
		if(isFtype(line,strlen(line)))
		{
			app=false;
			fprintf(fil1,"%s",line);
		}
		else
		{
			if(app && NotEmpty(line,strlen(line)))
			{
				fprintf(fil1,"$$ %s",line);
			}
			else
			{
				fprintf(fil1,"%s",line);
			}

		}
	}
	fclose(fil);

	fclose(fil1);
	fil1=fopen(new_name,"r");



	yyin=fil1;
	int i=0;
	for(i=0;i<10;i++){
		intreg[i]=false;
		floatreg[i]=false;
	}
	fp=fopen(filename1,"w+");

	yyparse();

	fclose(fp);
	fclose(fil1);
	remove(new_name);

	if(success)
		printf("Compilation Successful!!\n");
	else
		printf("Error in Compilation.\n");

	printf("==============================================\n");

	FILE*varfile=fopen(filename2,"w");
	for(int i=0;i<totvars;i++)
	{
	fprintf(varfile,"%s,%s,%d\n",vars[i],types[i],sizes[i]*4);
	}
	fclose(varfile);

	FILE*successf=fopen("Res.txt","w");
	if(success){
		fprintf(successf,"1");
	}
	else
	{
		fprintf(successf,"0");
		
	}
	fclose(successf);

	return 0;
}

-------------------------------------------------------------------------------------------------------------------

ReadMe.txt

1. Copy your C file to be compiled in this folder.
2. Open terminal in this folder and run "./Compile.sh <your_file_name>"
3. If your code is erroneous, suitable syntax and semantic errors will be printed to stdout
4. If code is correct, then the code's Intermediate Code and MIPS Assembly Code is generated and stored and the MIPS Code is simulated on SPIM simulator.

-----------------------------------------------------------------------------------------------------------